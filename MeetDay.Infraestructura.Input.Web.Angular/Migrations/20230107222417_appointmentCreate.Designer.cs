// <auto-generated />
using System;
using MeetDay.Infraestructura.Output.Data.Postgresql.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeetDay.Infraestructura.Input.Web.Angular.Migrations
{
    [DbContext(typeof(MeetDayContext))]
    [Migration("20230107222417_appointmentCreate")]
    partial class appointmentCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated");

                    b.Property<int>("GestionId")
                        .HasColumnType("integer")
                        .HasColumnName("gestionid");

                    b.Property<string>("Observation")
                        .HasColumnType("text")
                        .HasColumnName("observation");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("state");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.CatalogDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasMaxLength(1000)
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("catalog_documents");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Document64")
                        .HasColumnType("text")
                        .HasColumnName("document64");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("document");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.DocumentAppointment", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id")
                        .HasColumnOrder(0);

                    b.Property<int>("CatalogDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogdocument_id")
                        .HasColumnOrder(1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.HasKey("DocumentId", "CatalogDocumentId", "AppointmentId");

                    b.ToTable("document_appointment");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.DocumentManagement", b =>
                {
                    b.Property<int>("CatalogDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogdocumentid")
                        .HasColumnOrder(0);

                    b.Property<int>("ManagementId")
                        .HasColumnType("integer")
                        .HasColumnName("managementid")
                        .HasColumnOrder(1);

                    b.HasKey("CatalogDocumentId", "ManagementId");

                    b.ToTable("document_management");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.Management", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_create");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Observation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observation");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("managements");
                });

            modelBuilder.Entity("MeetDay.Dominio.Core.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("role");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
